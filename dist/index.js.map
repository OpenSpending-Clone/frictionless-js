{"version":3,"sources":["../src/index.js"],"names":["crypto","require","fs","path","stream","url","chardet","fetch","lodash","mime","urljoin","toArray","infer","csvParser","guessParseOptions","xlsxParser","DEFAULT_ENCODING","browser","open","pathOrDescriptor","basePath","format","descriptor","isFileFromBrowser","FileInterface","isPlainObject","cloneDeep","data","FileInline","Object","assign","parsePath","isString","TypeError","isRemote","pathType","isUrl","FileRemote","FileLocal","File","load","constructor","_descriptor","_basePath","encoding","Error","buffer","buffers","Buffer","concat","rows","keyed","sheet","size","_rows","parserDatabase","parser","addSchema","displayName","schema","sample","headers","keys","knownTabularFormats","indexOf","parserOptions","dialect","delimiter","quoteChar","quote","thisFileStream","name","split","pop","URL","createObjectURL","_encoding","toNodeStream","getReader","arrayBuffer","fileName","hash","text","createHash","update","digest","hashSha256","join","end","createReadStream","start","statSync","readFileSync","detectFileSync","sampleSize","isItUrl","browserBuffer","res","status","window","body","statusText","_buffer","from","JSON","stringify","byteLength","bufferStream","PassThrough","isArray","rowStream","objectMode","forEach","row","write","csv","tsv","xlsx","xls","path_","urlParts","parse","pathname","replace","query","includes","extension","extname","toLowerCase","trim","slice","mediatype","lookup","parseDatasetIdentifier","out","owner","type","original","version","normalizedPath","process","platform","resolve","posix","basename","urlparts","parts","length","host","repoName","branch","push","splice","resolvedPath","json","userid","revisionId","parseInt","id","r","RegExp","test","isDataset","endsWith","lstatSync","isFile","Dataset","identifier","_resources","_identifier","dataset","_sync","readmePath","_path","existsSync","dataPackageJsonPath","_originalDescriptor","readme","toString","resources","map","resource","addResource","isObject","offset","undefined","module","exports"],"mappings":"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","sourcesContent":["// File and Dataset objects\nconst crypto = require('crypto')\nconst fs = require('fs')\nconst path = require('path')\nconst stream = require('stream')\nconst url = require('url')\n\n// encoding helpers\nconst chardet = require('chardet')\nconst fetch = require('node-fetch')\nconst lodash = require('lodash')\nconst mime = require('mime-types')\nconst urljoin = require('url-join')\nconst toArray = require('stream-to-array')\nconst infer = require('tableschema').infer\n\nconst { csvParser, guessParseOptions } = require('./parser/csv')\nconst { xlsxParser } = require('./parser/xlsx')\n\nconst DEFAULT_ENCODING = 'utf-8'\n\n// for browser related functions\nconst browser = require('./browser-utils/index')\n\n// create a File from a pathOrDescriptor\nfunction open(pathOrDescriptor, { basePath, format } = {}) {\n  let descriptor = null\n\n  if (browser.isFileFromBrowser(pathOrDescriptor)) {\n    return new FileInterface(pathOrDescriptor)\n  }\n\n  if (lodash.isPlainObject(pathOrDescriptor)) {\n    descriptor = lodash.cloneDeep(pathOrDescriptor)\n    // NB: data must come first - we could have data and path in which path\n    // is not used (data comes from data)\n    if (descriptor.data) {\n      return new FileInline(descriptor, { basePath })\n    } else if (descriptor.path) {\n      // We want properties already in our descriptor to take priority over\n      // those inferred from path so we assign in this order\n      descriptor = Object.assign(\n        parsePath(descriptor.path, basePath),\n        descriptor\n      )\n    }\n  } else if (lodash.isString(pathOrDescriptor)) {\n    descriptor = parsePath(pathOrDescriptor, basePath, format)\n  } else {\n    throw new TypeError(`Cannot create File with ${pathOrDescriptor}`)\n  }\n\n  const isRemote = descriptor.pathType === 'remote' || isUrl(basePath)\n\n  if (isRemote) {\n    return new FileRemote(descriptor, { basePath })\n  }\n  return new FileLocal(descriptor, { basePath })\n}\n\n// Abstract Base instance of File\nclass File {\n  // 2019-02-05 kept for backwards compatibility (we factored method out as open)\n  // TODO: deprecate this ...\n  static load(pathOrDescriptor, { basePath, format } = {}) {\n    return open(pathOrDescriptor, { basePath, format })\n  }\n\n  constructor(descriptor, { basePath } = {}) {\n    this._descriptor = descriptor\n    this._basePath = basePath\n    this._descriptor.encoding = this.encoding || DEFAULT_ENCODING\n  }\n\n  get descriptor() {\n    return this._descriptor\n  }\n\n  get path() {\n    throw new Error(\n      'This is an abstract base class which you should not instantiate. Use open() instead'\n    )\n  }\n\n  stream() {\n    return null\n  }\n\n  get buffer() {\n    return (async () => {\n      const stream = await this.stream()\n      const buffers = await toArray(stream)\n      return Buffer.concat(buffers)\n    })()\n  }\n\n  rows({ keyed, sheet, size } = {}) {\n    return this._rows({ keyed, sheet, size })\n  }\n\n  _rows({ keyed, sheet, size } = {}) {\n    if (this.descriptor.format in parserDatabase) {\n      const parser = parserDatabase[this.descriptor.format]\n      return parser(this, { keyed, sheet, size })\n    }\n    throw new Error(\n      `We do not have a parser for that format: ${this.descriptor.format}`\n    )\n  }\n\n  async addSchema() {\n    if (this.displayName === 'FileInline') {\n      this.descriptor.schema = await infer(this.descriptor.data)\n      return\n    }\n\n    // Try to infer schema from sample data if given file is xlsx\n    if (this.descriptor.format === 'xlsx' && this.descriptor.sample) {\n      let headers = 1\n      if (lodash.isPlainObject(this.descriptor.sample[0])) {\n        headers = Object.keys(this.descriptor.sample[0])\n      }\n      this.descriptor.schema = await infer(this.descriptor.sample, { headers })\n      return\n    }\n\n    // Ensure file is tabular\n    if (knownTabularFormats.indexOf(this.descriptor.format) === -1) {\n      throw new Error('File is not in known tabular format.')\n    }\n\n    // Get parserOptions so we can use it when \"infering\" schema:\n    const parserOptions = await guessParseOptions(this)\n    // We also need to include parserOptions in \"dialect\" property of descriptor:\n    this.descriptor.dialect = {\n      delimiter: parserOptions.delimiter,\n      quoteChar: parserOptions.quote,\n    }\n    // Now let's get a stream from file and infer schema:\n    let thisFileStream = await this.stream({ size: 100 })\n    this.descriptor.schema = await infer(thisFileStream, parserOptions)\n  }\n}\n\nclass FileInterface extends File {\n  constructor(descriptor, { basePath } = {}) {\n    super(descriptor, { basePath })\n    this._descriptor.format = descriptor.name.split('.').pop() || ''\n  }\n\n  get displayName() {\n    return 'FileInterface'\n  }\n\n  // create and return a path url\n  get path() {\n    return URL.createObjectURL(this.descriptor)\n  }\n\n  get encoding() {\n    return this._encoding || DEFAULT_ENCODING\n  }\n\n  /**\n   *\n   * If the size is -1 then will read whole file\n   */\n  stream({ size } = {}) {\n    size = size === -1 ? this.size : size || 0\n    return browser.toNodeStream(this.descriptor.stream().getReader(), size)\n  }\n\n  get buffer() {\n    return this.descriptor.arrayBuffer()\n  }\n\n  get size() {\n    return this.descriptor.size\n  }\n\n  get fileName() {\n    return this.descriptor.name\n  }\n\n  async hash() {\n    const text = await this.descriptor.text()\n    return crypto.createHash('md5').update(text).digest('hex')\n  }\n\n  async hashSha256() {\n    const text = await this.descriptor.text()\n    return crypto.createHash('sha256').update(text).digest('hex')\n  }\n}\n\nclass FileLocal extends File {\n  get displayName() {\n    return 'FileLocal'\n  }\n\n  get path() {\n    return this._basePath\n      ? path.join(this._basePath, this.descriptor.path)\n      : this.descriptor.path\n  }\n\n  stream({ end } = {}) {\n    return fs.createReadStream(this.path, { start: 0, end })\n  }\n\n  get size() {\n    return fs.statSync(this.path).size\n  }\n\n  get hash() {\n    return crypto\n      .createHash('md5')\n      .update(fs.readFileSync(this.path))\n      .digest('hex')\n  }\n\n  get encoding() {\n    // When data is huge, we want to optimize performace (in tradeoff of less accuracy):\n    // So we are using sample of first 100K bytes here:\n    if (this.size > 1000000) {\n      return chardet.detectFileSync(this.path, { sampleSize: 1000000 })\n    }\n    return chardet.detectFileSync(this.path)\n  }\n}\n\nclass FileRemote extends File {\n  get displayName() {\n    return 'FileRemote'\n  }\n\n  get path() {\n    const isItUrl = isUrl(this.descriptor.path)\n    if (isItUrl) {\n      return this.descriptor.path\n    } else {\n      return this._basePath\n        ? urljoin(this._basePath, this.descriptor.path)\n        : this.descriptor.path\n    }\n  }\n\n  get browserBuffer() {\n    return (async () => {\n      const res = await fetch(this.path)\n      return await res.arrayBuffer()\n    })()\n  }\n\n  stream({ size = 0 } = {}) {\n    return (async () => {\n      const res = await fetch(this.path)\n      if (res.status === 200) {\n        if (typeof window === 'undefined') {\n          return res.body\n        } else {\n          return await browser.toNodeStream(res.body.getReader(), size)\n        }\n      } else {\n        throw new Error(\n          `${res.status}: ${res.statusText}. Requested URL: ${this.path}`\n        )\n      }\n    })()\n  }\n\n  get encoding() {\n    return this._encoding || DEFAULT_ENCODING\n  }\n}\n\nclass FileInline extends File {\n  constructor(descriptor, { basePath } = {}) {\n    super(descriptor, { basePath })\n\n    // JSON is special case ...\n    if (lodash.isString(this.descriptor.data)) {\n      this._buffer = Buffer.from(this.descriptor.data)\n    } else {\n      // It is json/javascript\n      this._buffer = Buffer.from(JSON.stringify(this.descriptor.data))\n    }\n  }\n\n  get displayName() {\n    return 'FileInline'\n  }\n\n  // Not really sure this should exist here ... - have it for tests atm\n  get path() {\n    return this.descriptor.path\n  }\n\n  get size() {\n    return this._buffer.byteLength\n  }\n\n  get hash() {\n    return crypto.createHash('md5').update(this._buffer).digest('hex')\n  }\n\n  stream() {\n    const bufferStream = new stream.PassThrough()\n    bufferStream.end(this._buffer)\n    return bufferStream\n  }\n\n  rows({ keyed } = {}) {\n    if (lodash.isArray(this.descriptor.data)) {\n      const rowStream = new stream.PassThrough({ objectMode: true })\n      this.descriptor.data.forEach((row) => {\n        rowStream.write(row)\n      })\n      rowStream.end()\n      return rowStream\n    }\n    return this._rows({ keyed, size })\n  }\n}\n\n// Available parsers per file format\nconst parserDatabase = {\n  csv: csvParser,\n  tsv: csvParser,\n  xlsx: xlsxParser,\n  xls: xlsxParser,\n}\n\n// List of formats that are known as tabular\nconst knownTabularFormats = ['csv', 'tsv', 'dsv']\n\nconst parsePath = (path_, basePath = null, format = null) => {\n  let fileName\n  const isItUrl = isUrl(path_) || isUrl(basePath)\n  if (isItUrl) {\n    const urlParts = url.parse(path_)\n    // eslint-disable-next-line no-useless-escape\n    fileName = urlParts.pathname.replace(/^.*[\\\\\\/]/, '')\n    // Check if format=csv is provided in the query\n    // But if format is provided explicitely by user then it'll be used\n    if (!format && urlParts.query && urlParts.query.includes('format=csv')) {\n      format = 'csv'\n    }\n  } else {\n    // eslint-disable-next-line no-useless-escape\n    fileName = path_.replace(/^.*[\\\\\\/]/, '')\n  }\n\n  const extension = path.extname(fileName)\n  fileName = fileName\n    .replace(extension, '')\n    .toLowerCase()\n    .trim()\n    .replace(/&/g, '-and-')\n    .replace(/[^a-z0-9-._]+/g, '-')\n  const descriptor = {\n    path: path_,\n    pathType: isItUrl ? 'remote' : 'local',\n    name: fileName,\n    format: format ? format : extension.slice(1).toLowerCase(),\n  }\n\n  const mediatype = mime.lookup(path_)\n  if (mediatype) {\n    descriptor.mediatype = mediatype\n  }\n\n  return descriptor\n}\n\nconst parseDatasetIdentifier = async (path_) => {\n  const out = {\n    name: '',\n    owner: null,\n    path: '',\n    type: '',\n    original: path_,\n    version: '',\n  }\n  if (path_ === null || path_ === '') return out\n\n  out.type = isUrl(path_) ? 'url' : 'local'\n  let normalizedPath = path_.replace(/\\/?datapackage\\.json/, '')\n  normalizedPath = normalizedPath.replace(/\\/$/, '')\n  if (out.type === 'local') {\n    if (process.platform === 'win32') {\n      out.path = path.resolve(normalizedPath)\n    } else {\n      out.path = path.posix.resolve(normalizedPath)\n    }\n    out.name = path.basename(out.path)\n  } else if (out.type === 'url') {\n    const urlparts = url.parse(normalizedPath)\n    const parts = urlparts.pathname.split('/')\n    let name = parts[parts.length - 1]\n    let owner = null\n    // is this a github repository?\n    if (urlparts.host === 'github.com') {\n      out.type = 'github'\n      // yes, modify url for raw file server\n      urlparts.host = 'raw.githubusercontent.com'\n      owner = parts[1]\n      let repoName = parts[2]\n      let branch = 'master'\n\n      // is the path a repository root?\n      if (parts.length < 6) {\n        // yes, use the repository name for the package name\n        name = repoName\n      }\n\n      // does the path contain subfolders (after the repository name)?\n      if (parts.length == 3) {\n        // no, add 'master' branch\n        parts.push(branch)\n      } else {\n        // yes, extract the branch and remove the 'tree' part\n        branch = parts[4]\n        parts.splice(3, 1)\n      }\n\n      urlparts.pathname = parts.join('/')\n      out.version = branch\n    } else if (urlparts.host === 'datahub.io') {\n      out.type = 'datahub'\n      urlparts.host = 'pkgstore.datahub.io'\n      owner = parts[1]\n      name = parts[2]\n      if (owner !== 'core') {\n        let resolvedPath = await fetch(\n          `https://api.datahub.io/resolver/resolve?path=${owner}/${name}`\n        )\n        resolvedPath = await resolvedPath.json()\n        parts[1] = resolvedPath.userid\n      }\n      let res = await fetch(\n        `https://api.datahub.io/source/${parts[1]}/${name}/successful`\n      )\n      if (res.status >= 400) {\n        throw new Error(\n          'Provided URL is invalid. Expected URL to a dataset or descriptor.'\n        )\n      }\n      res = await res.json()\n      const revisionId = parseInt(res.id.split('/').pop(), 10)\n      parts.push(revisionId)\n      urlparts.pathname = parts.join('/')\n      out.version = revisionId\n    }\n    out.name = name\n    out.owner = owner\n    out.path = url.format(urlparts) + '/'\n  }\n\n  return out\n}\n\nconst isUrl = (path_) => {\n  const r = new RegExp('^(?:[a-z]+:)?//', 'i')\n  return r.test(path_)\n}\n\nconst isDataset = (path_) => {\n  // If it is a path to file we assume it is not a Dataset\n  // Only exception is 'datapackage.json':\n  if (path_.endsWith('datapackage.json')) {\n    return true\n  }\n  const isItUrl = isUrl(path_)\n  if (isItUrl) {\n    // If it is URL we assume it is a file as it does not end with 'datapackage.json'\n    return false\n  } else if (fs.lstatSync(path_).isFile()) {\n    return false\n  }\n  // All other cases are true\n  return true\n}\n\n// ========================================================\n// Dataset\n\nclass Dataset {\n  // TODO: handle owner\n  constructor(descriptor = {}, identifier = { path: null, owner: null }) {\n    if (!lodash.isPlainObject(descriptor)) {\n      throw new TypeError(`To create a new Dataset please use Dataset.load`)\n    }\n\n    this._descriptor = descriptor\n    this._resources = []\n    this._identifier = identifier\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  static async load(pathOrDescriptor, { owner = null } = {}) {\n    if (\n      !(\n        lodash.isString(pathOrDescriptor) ||\n        lodash.isPlainObject(pathOrDescriptor)\n      )\n    ) {\n      throw new TypeError(\n        'Dataset needs to be created with descriptor Object or identifier string'\n      )\n    }\n\n    let descriptor,\n      identifier = null\n\n    if (lodash.isPlainObject(pathOrDescriptor)) {\n      descriptor = pathOrDescriptor\n      identifier = {\n        path: null,\n        owner: owner,\n      }\n    } else {\n      // pathOrDescriptor is a path\n      descriptor = {}\n      // TODO: owner if provided should override anything parsed from path\n      identifier = await parseDatasetIdentifier(pathOrDescriptor)\n    }\n\n    const dataset = new Dataset(descriptor, identifier)\n    await dataset._sync()\n    return dataset\n  }\n\n  // Bootstrap ourselves with {this.path}/datapackage.json and readme if exists\n  async _sync() {\n    const readmePath = this._path('README.md')\n    // eslint-disable-next-line default-case\n    switch (this.identifier.type) {\n      case 'local': {\n        if (fs.existsSync(this.dataPackageJsonPath)) {\n          this._descriptor = JSON.parse(\n            fs.readFileSync(this.dataPackageJsonPath)\n          )\n          this._originalDescriptor = lodash.cloneDeep(this._descriptor)\n        } else {\n          throw new Error('No datapackage.json at destination.')\n        }\n        // Now get README from local disk if exists\n        if (fs.existsSync(readmePath)) {\n          this._descriptor.readme = fs.readFileSync(readmePath).toString()\n        }\n        break\n      }\n      case 'url':\n      case 'github':\n      case 'datahub': {\n        let res = await fetch(this.dataPackageJsonPath)\n        if (res.status >= 400) {\n          throw new Error(\n            `${res.status}: ${res.statusText}. Requested URL: ${res.url}`\n          )\n        }\n        this._descriptor = await res.json()\n        this._originalDescriptor = lodash.cloneDeep(this._descriptor)\n        if (!this._descriptor.readme) {\n          res = await fetch(readmePath)\n          // May not exist and that is ok!\n          if (res.status === 200) {\n            this._descriptor.readme = await res.text()\n          }\n        }\n        break\n      }\n    }\n\n    // handle case where readme was already inlined in the descriptor as readme\n    // attribute as e.g. on the datahub\n    // Now load each resource ...\n    this._resources = this.descriptor.resources.map((resource) => {\n      return open(resource, { basePath: this.path })\n    })\n    // We need to update original descriptor with metadata about resources after guessing them\n    this.descriptor.resources = this._resources.map((resource) => {\n      return resource.descriptor\n    })\n  }\n\n  get identifier() {\n    return this._identifier\n  }\n\n  get descriptor() {\n    return this._descriptor\n  }\n\n  get path() {\n    return this.identifier.path\n  }\n\n  get dataPackageJsonPath() {\n    return this._path('datapackage.json')\n  }\n\n  get readme() {\n    return this._descriptor.readme\n  }\n\n  // Array of File objects\n  get resources() {\n    return this._resources\n  }\n\n  addResource(resource) {\n    if (lodash.isPlainObject(resource)) {\n      this.descriptor.resources.push(resource)\n      this.resources.push(open(resource))\n    } else if (lodash.isObject(resource)) {\n      // It is already a resource object!\n      this.descriptor.resources.push(resource.descriptor)\n      this.resources.push(resource)\n    } else {\n      throw new TypeError(\n        `addResource requires a resource descriptor or an instantiated resources but got: ${resource}`\n      )\n    }\n  }\n\n  // Path relative to this dataset\n  _path(offset = null) {\n    const path_ = this.path\n      ? this.path.replace('datapackage.json', '')\n      : this.path\n    // TODO: ensure offset is relative (security etc)\n    switch (this.identifier.type) {\n      case 'local':\n        return path.join(path_, offset)\n      case 'url':\n        return urljoin(path_, offset)\n      case 'github':\n        return urljoin(path_, offset)\n      case 'datahub':\n        return urljoin(path_, offset)\n      case undefined:\n        return offset\n      default:\n        throw new Error(`Unknown path type: ${this.identifier.type}`)\n    }\n  }\n}\n\nmodule.exports = {\n  open,\n  File,\n  FileLocal,\n  FileRemote,\n  FileInline,\n  FileInterface,\n  parsePath,\n  parseDatasetIdentifier,\n  isUrl,\n  isDataset,\n  Dataset,\n  xlsxParser,\n  csvParser,\n}\n"],"file":"index.js"}